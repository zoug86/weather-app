{"version":3,"sources":["dayFormat.js","compoenents/WeekForcast.js","api.js","actions/detailAction.js","compoenents/Display.js","App.js","reportWebVitals.js","reducers/detailsReducer.js","reducers/index.js","index.js"],"names":["dayFormat","date","Date","getDay","dateFormat","d","day","getDate","month","getMonth","year","getFullYear","WeekForcast","forecastDay","useSelector","state","details","forecast","forecastday","className","map","i","src","condition","icon","style","width","height","alt","Math","floor","maxtemp_c","currentURL","location","process","loadDetails","dispatch","a","axios","get","response","type","payload","weatherParam","data","Display","useDispatch","useEffect","useState","setLocation","currentLocation","currentData","isLoading","is_day","document","body","background","dayMode","console","log","last_updated","name","country","marginTop","temp_c","text","precip_mm","humidity","wind_kph","value","placeholder","onChange","e","target","onClick","preventDefault","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","detailReducer","action","current","rootReducer","combineReducers","detailsReducer","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","getElementById"],"mappings":"gNAAaA,EAAY,SAACC,GAGtB,MAFW,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YACtE,IAAIC,KAAKD,GACHE,WAGLC,EAAa,SAACH,GACvB,IACII,EAAI,IAAIH,KAAKD,GACbK,EAAMD,EAAEE,UACRD,EAAM,KACNA,EAAM,IAAMA,GAEhB,IAAIE,EAAQH,EAAEI,WACdD,EAPa,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAO7GA,GACf,IAAIE,EAAOL,EAAEM,cACb,MAAM,GAAN,OAAUL,EAAV,YAAiBE,EAAjB,YAA0BE,I,cCcfE,EAvBK,WAChB,IACMC,EADeC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,WAAxCC,SACqBC,YAE7B,OACI,qBAAKC,UAAU,iBAAf,SACI,qBAAIA,UAAU,YAAd,UACKN,EAAYO,KAAI,SAACd,EAAKe,GACnB,OACI,+BACI,qBAAKC,IAAKhB,EAAIA,IAAIiB,UAAUC,KAAMC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAAUC,IAAI,KAChF,mBAAGT,UAAU,WAAW,eAAa,UACrC,sBAAMA,UAAU,WAAhB,UDAMlB,ECAwCK,EAAIL,KDC/D,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAC9C,IAAIC,KAAKD,GACHE,SAAW,MCH8D,sBAAMgB,UAAU,WAAhB,SAA4BU,KAAKC,MAAMxB,EAAIA,IAAIyB,eAHzGV,GDGA,IAACpB,KCKlB,qBAAKkB,UAAU,gB,iBCrBlBa,EAAa,SAACC,GAAD,gBAFV,gCAEU,6BAA6CC,kCAA7C,cAAgFD,EAAhF,YCAbE,EAAc,SAACF,GAAD,8CAAc,WAAOG,GAAP,eAAAC,EAAA,sEACdC,IAAMC,IAAIP,EAAWC,IADP,OAC/BO,EAD+B,OAGrCJ,EAAS,CACLK,KAAM,cACNC,QAAS,CACLC,aAAcH,EAASI,QAI/BR,EAAS,CACLK,KAAM,oBAX2B,2CAAd,uDCwFZI,EAnFC,WACZ,IAAMT,EAAWU,cAEjBC,qBAAU,WACNX,EAASD,EAAY,aAEtB,IAEH,MAAgCa,mBAAS,IAAzC,mBAAOf,EAAP,KAAiBgB,EAAjB,KACA,EAAoDnC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,WAAvEkC,EAAR,EAAQA,gBAAiBC,EAAzB,EAAyBA,YAAaC,EAAtC,EAAsCA,UAwBtC,OATa,uCAAG,sBAAAf,EAAA,sDACe,IAAvBc,EAAYE,OACZC,SAASC,KAAK9B,MAAM+B,WAAa,4CAEjCF,SAASC,KAAK9B,MAAM+B,WAAa,oCAJzB,2CAAH,oDAObC,GACAC,QAAQC,IAAI3D,EAAUmD,EAAYS,eAC7BR,EA4CM,yCAzCH,sBAAKjC,UAAU,YAAf,UACI,sBAAKA,UAAU,eAAf,UACI,qBAAKA,UAAU,qBACf,sBAAKA,UAAU,iBAAf,UACI,oBAAIA,UAAU,eAAd,SAA8BnB,EAAUmD,EAAYS,gBAAmB,sBAAMzC,UAAU,WAAhB,SAA4Bf,EAAW+C,EAAYS,gBAC1H,mBAAGzC,UAAU,gBAAgB,eAAa,YAAc,sBAAMA,UAAU,WAAhB,mBAA+B+B,EAAgBW,KAA/C,aAAwDX,EAAgBY,cAGpI,sBAAK3C,UAAU,oBAAf,UAAmC,mBAAGA,UAAU,eAAe,eAAa,QACxE,qBAAKG,IAAK6B,EAAY5B,UAAUC,KAAMC,MAAO,CAAEC,MAAO,QAASC,OAAQ,QAASoC,UAAW,QAAUnC,IAAI,KACzG,oBAAIT,UAAU,eAAd,mBAAiCU,KAAKC,MAAMqB,EAAYa,QAAxD,WACA,oBAAI7C,UAAU,eAAd,SAA8BgC,EAAY5B,UAAU0C,aAG5D,sBAAK9C,UAAU,YAAf,UACI,qBAAKA,UAAU,uBAAf,SACI,sBAAKA,UAAU,aAAf,UACI,sBAAKA,UAAU,gBAAf,cAAgC,sBAAMA,UAAU,QAAhB,2BAA4C,sBAAMA,UAAU,QAAhB,mBAA4BgC,EAAYe,UAAxC,SACxE,qBAAK/C,UAAU,aAEnB,sBAAKA,UAAU,WAAf,cAA2B,sBAAMA,UAAU,QAAhB,sBAAuC,sBAAMA,UAAU,QAAhB,mBAA4BgC,EAAYgB,SAAxC,QAC9D,qBAAKhD,UAAU,aAEnB,sBAAKA,UAAU,OAAf,cAAuB,sBAAMA,UAAU,QAAhB,kBAAmC,sBAAMA,UAAU,QAAhB,mBAA4BgC,EAAYiB,SAAxC,WACtD,qBAAKjD,UAAU,kBAI3B,cAAC,EAAD,IACA,qBAAKA,UAAU,qBAAf,SACI,iCACI,uBAAOA,UAAU,iBAAiBkD,MAAOpC,EAAUQ,KAAK,OAAO6B,YAAY,aAAaC,SAzD1F,SAACC,GACnBvB,EAAYuB,EAAEC,OAAOJ,UAyDD,yBAAQlD,UAAU,kBAAkBuD,QAtDvC,SAACF,GAClBA,EAAEG,iBACFvC,EAASD,EAAYF,IACrByB,QAAQC,IAAIR,EAAYE,QACxBJ,EAAY,IACe,IAAvBE,EAAYE,SACZC,SAASC,KAAK9B,MAAM+B,WAAa,UAgDjB,cAA4D,mBAAG,eAAa,YAAc,kE,MCjEvGoB,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,sBCPRQ,EAAe,CACjBnC,YAAa,GACbD,gBAAiB,GACjBjC,SAAU,GACVmC,WAAW,GAqBAmC,EAlBO,WAAmC,IAAlCxE,EAAiC,uDAAzBuE,EAAcE,EAAW,uCACpD,OAAQA,EAAO/C,MACX,IAAK,cACD,OAAO,2BACA1B,GADP,IAEIoC,YAAaqC,EAAO9C,QAAQC,aAAa8C,QACzCvC,gBAAiBsC,EAAO9C,QAAQC,aAAaV,SAC7ChB,SAAUuE,EAAO9C,QAAQC,aAAa1B,SACtCmC,WAAW,IAEnB,IAAK,kBACD,OAAO,2BAAKrC,GAAZ,IAAmBqC,WAAW,IAClC,QACI,OAAO,eAAKrC,KCZT2E,EALKC,YAAgB,CAEhC3E,QAAS4E,ICIPC,EAAqC,qBAAXC,QAA0BA,OAAOC,sCAAyCC,IAEpGC,EAAQC,YAAYR,EAAaG,EAAgBM,YAAgBC,OAGvEC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJ3C,SAASkD,eAAe,SAM1B3B,M","file":"static/js/main.74218676.chunk.js","sourcesContent":["export const dayFormat = (date) => {\r\n    let days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n    let d = new Date(date);\r\n    return days[d.getDay()];\r\n}\r\n\r\nexport const dateFormat = (date) => {\r\n    let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n    let d = new Date(date);\r\n    let day = d.getDate();\r\n    if (day < 10) {\r\n        day = '0' + day;\r\n    }\r\n    let month = d.getMonth();\r\n    month = months[month]\r\n    let year = d.getFullYear();\r\n    return `${day} ${month} ${year}`\r\n}\r\n\r\nexport const forecastDayFormat = (date) => {\r\n    let days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n    let d = new Date(date);\r\n    return days[d.getDay() + 1];\r\n}\r\n//console.log(dateFormat(\"2021-06-30 17:30\"))","import React from 'react';\r\nimport { forecastDayFormat } from '../dayFormat';\r\n\r\n//Redux\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\nconst WeekForcast = () => {\r\n    const { forecast } = useSelector(state => state.details);\r\n    const forecastDay = forecast.forecastday;\r\n    //console.log(dayFormat(forecastDay[0].date))\r\n    return (\r\n        <div className=\"week-container\">\r\n            <ul className=\"week-list\">\r\n                {forecastDay.map((day, i) => {\r\n                    return (\r\n                        <li key={i}>\r\n                            <img src={day.day.condition.icon} style={{ width: \"50px\", height: \"50px\" }} alt=\"\" />\r\n                            <i className=\"day-icon\" data-feather=\"cloud\"></i>\r\n                            <span className=\"day-name\">{forecastDayFormat(day.date)}</span><span className=\"day-temp\">{Math.floor(day.day.maxtemp_c)}</span>\r\n                        </li>\r\n                    )\r\n                })}\r\n\r\n                <div className=\"clear\"></div>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeekForcast;","\r\nconst baseURL = \"http://api.weatherapi.com/v1/\";\r\n\r\nexport const currentURL = (location) => `${baseURL}forecast.json?key=${process.env.REACT_APP_KEY_API}&q=${location}&days=7`;\r\n","import axios from 'axios';\r\nimport { currentURL } from '../api';\r\n\r\nexport const loadDetails = (location) => async (dispatch) => {\r\n    const response = await axios.get(currentURL(location));\r\n    //console.log(currentURL(location))\r\n    dispatch({\r\n        type: \"GET_DETAILS\",\r\n        payload: {\r\n            weatherParam: response.data\r\n        }\r\n    })\r\n\r\n    dispatch({\r\n        type: \"LOADING_DETAILS\",\r\n    });\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { dayFormat, dateFormat } from '../dayFormat';\r\nimport WeekForcast from './WeekForcast';\r\n//Redux\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { loadDetails } from '../actions/detailAction';\r\n\r\n\r\nconst Display = () => {\r\n    const dispatch = useDispatch();\r\n    // call useEffect Once at the first render\r\n    useEffect(() => {\r\n        dispatch(loadDetails(\"london\"));\r\n\r\n    }, [])\r\n\r\n    const [location, setLocation] = useState(\"\");\r\n    const { currentLocation, currentData, isLoading } = useSelector(state => state.details)\r\n    const changeHandler = (e) => {\r\n        setLocation(e.target.value);\r\n    }\r\n\r\n    const clickHandler = (e) => {\r\n        e.preventDefault();\r\n        dispatch(loadDetails(location));\r\n        console.log(currentData.is_day)\r\n        setLocation(\"\");\r\n        if (currentData.is_day === 0) {\r\n            document.body.style.background = \"black\";\r\n        }\r\n    }\r\n\r\n    const dayMode = async () => {\r\n        if (currentData.is_day === 0) {\r\n            document.body.style.background = \"linear-gradient(to top, #283E51, #0A2342)\";\r\n        } else {\r\n            document.body.style.background = \"linear-gradient(#acb6e5, #86fde8)\";\r\n        }\r\n    }\r\n    dayMode();\r\n    console.log(dayFormat(currentData.last_updated))\r\n    if (!isLoading) {\r\n        return (\r\n\r\n            <div className=\"container\">\r\n                <div className=\"weather-side\">\r\n                    <div className=\"weather-gradient\"></div>\r\n                    <div className=\"date-container\">\r\n                        <h2 className=\"date-dayname\">{dayFormat(currentData.last_updated)}</h2><span className=\"date-day\">{dateFormat(currentData.last_updated)}</span>\r\n                        <i className=\"location-icon\" data-feather=\"map-pin\"></i><span className=\"location\">{`${currentLocation.name}, ${currentLocation.country}`}</span>\r\n\r\n                    </div>\r\n                    <div className=\"weather-container\"><i className=\"weather-icon\" data-feather=\"sun\"></i>\r\n                        <img src={currentData.condition.icon} style={{ width: \"150px\", height: \"150px\", marginTop: \"10px\" }} alt=\"\" />\r\n                        <h1 className=\"weather-temp\">{`${Math.floor(currentData.temp_c)}°C`}</h1>\r\n                        <h3 className=\"weather-desc\">{currentData.condition.text}</h3>\r\n                    </div>\r\n                </div>\r\n                <div className=\"info-side\">\r\n                    <div className=\"today-info-container\">\r\n                        <div className=\"today-info\">\r\n                            <div className=\"precipitation\"> <span className=\"title\">PRECIPITATION</span><span className=\"value\">{`${currentData.precip_mm} mm`}</span>\r\n                                <div className=\"clear\"></div>\r\n                            </div>\r\n                            <div className=\"humidity\"> <span className=\"title\">HUMIDITY</span><span className=\"value\">{`${currentData.humidity} %`}</span>\r\n                                <div className=\"clear\"></div>\r\n                            </div>\r\n                            <div className=\"wind\"> <span className=\"title\">WIND</span><span className=\"value\">{`${currentData.wind_kph} km/h`}</span>\r\n                                <div className=\"clear\"></div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <WeekForcast />\r\n                    <div className=\"location-container\">\r\n                        <form>\r\n                            <input className=\"location-input\" value={location} type=\"text\" placeholder=\"Enter City\" onChange={changeHandler} />\r\n                            <button className=\"location-button\" onClick={clickHandler}> <i data-feather=\"map-pin\"></i><span>Change location</span></button>\r\n                        </form>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    } else {\r\n        return <h1>Loading</h1>\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Display;","import Display from './compoenents/Display'\nimport './styles/app.scss';\n\nfunction App() {\n  return (\n    < div >\n      <Display />\n    </div >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\r\n    currentData: {},\r\n    currentLocation: {},\r\n    forecast: {},\r\n    isLoading: true\r\n}\r\n\r\nconst detailReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"GET_DETAILS\":\r\n            return {\r\n                ...state,\r\n                currentData: action.payload.weatherParam.current,\r\n                currentLocation: action.payload.weatherParam.location,\r\n                forecast: action.payload.weatherParam.forecast,\r\n                isLoading: false\r\n            };\r\n        case \"LOADING_DETAILS\":\r\n            return { ...state, isLoading: false }\r\n        default:\r\n            return { ...state };\r\n\r\n    }\r\n}\r\n\r\nexport default detailReducer;","import { combineReducers } from \"redux\";\r\nimport detailsReducer from \"./detailsReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    // reducers go here\r\n    details: detailsReducer\r\n})\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers'\n\nconst composeEnhancer = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\nconst store = createStore(rootReducer, composeEnhancer(applyMiddleware(thunk)));\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}